{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAIoBC,SAASC,cAAc,QAqB/BC,iBAAiB,UAAWC,IACtCA,EAAEC,iBAEF,MAAMC,GAAeF,EAAEG,cAAcC,SAASC,MAAMC,MAC9CC,GAAcP,EAAEG,cAAcC,SAASI,KAAKF,MAC5CG,GAAgBT,EAAEG,cAAcC,SAASM,OAAOJ,MAClCK,MAAMF,GAAaG,KAAK,MAEhCC,SAAQ,CAACC,EAAMC,KA1B7B,IAAuBC,EAAUX,GAAVW,EA4BCD,EAAI,EA5BKV,EA6BZH,EAAcK,EAAYQ,EA3B7B,IAAIE,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAACF,E,MAAUX,IAEnBc,EAAO,C,SAACH,E,MAAUX,MAEnBA,OAsBAmB,MAAK,EAACR,SAAEA,EAAQX,MAAEA,MACjBoB,EAAA9B,GAAS+B,OAAOC,QAAQ,qBAAqBX,QAAeX,UAE7DuB,OAAM,EAACZ,SAAEA,EAAQX,MAAEA,MAClBoB,EAAA9B,GAAS+B,OAAOG,QAAQ,oBAAoBb,QAAeX","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\n\nconst formElement = document.querySelector('form');\n\n\nfunction createPromise(position, delay) {\n  \n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay})\n      } else {\n        reject({position, delay})\n      }\n    }, delay)\n\n  })\n\n  return promise\n}\n\n\nformElement.addEventListener('submit', (e) => {\n  e.preventDefault()\n\n  const delayValue = +(e.currentTarget.elements.delay.value);\n  const stepValue = +(e.currentTarget.elements.step.value);\n  const amountValue = +(e.currentTarget.elements.amount.value);\n  const amountArray = Array(amountValue).fill(null);\n\n  amountArray.forEach((item, i) => {\n\n    const positionArg = i + 1;\n    const delayArg = delayValue + (stepValue * i);\n\n    createPromise(positionArg, delayArg)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  })\n\n})"],"names":["$eWCmQ","parcelRequire","document","querySelector","addEventListener","e","preventDefault","delayValue","currentTarget","elements","delay","value","stepValue","step","amountValue","amount","Array","fill","forEach","item","i","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.36bcdf61.js.map"}